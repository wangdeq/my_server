#include "net_link.h"
#include <linux/module.h>
#include <linux/kernel.h>
#include <linux/init.h>
#include <linux/types.h>
#include <linux/errno.h>
#include <linux/crypto.h>
#include <linux/scatterlist.h>
#include <asm/byteorder.h>
#include <linux/slab.h>
#include <linux/syscalls.h>
#include <linux/gfp.h>
#include <linux/highmem.h>



int crypto_hwf_expand_key(struct crypto_hwf_ctx *ctx, const u8 *in_key,
		unsigned int key_len)
{
	const __le32 *key = (const __le32 *)in_key;

	if ( key_flag == 0 )
		key_flag = 1 ;
	else
		key_flag = 0 ;

	if (key_len != HWF_KEYSIZE_128 && key_len != HWF_KEYSIZE_192 && key_len != HWF_KEYSIZE_256)
	{
		printk ( "\n\nkey_len wrong\n\n" ) ;
		return -EINVAL;
	}

	ctx->key_length = key_len;

	ctx->key[0] = le32_to_cpu(key[0]);
	ctx->key[1] = le32_to_cpu(key[1]);
	ctx->key[2] = le32_to_cpu(key[2]);
	ctx->key[3] = le32_to_cpu(key[3]);


	return 0;
}

int crypto_hwf_set_key(struct crypto_tfm *tfm, const u8 *in_key,
		unsigned int key_len)
{
	struct crypto_hwf_ctx *ctx = crypto_tfm_ctx(tfm);
	u32 *flags = &tfm->crt_flags;
	int ret;
	int i  = 0 ;
	u8 des3_in_key[24] ;
	
	while ( i < 16 )
	{
		des3_in_key[i] = in_key[i] ;
		++ i ;
	}	
	
	des3_in_key[16] = des3_in_key[1] ;
	des3_in_key[17] = des3_in_key[2] ;
	des3_in_key[18] = des3_in_key[5] ;
	des3_in_key[19] = des3_in_key[7] ;
	des3_in_key[20] = des3_in_key[9] ;
	des3_in_key[21] = des3_in_key[11] ;
	des3_in_key[22] = des3_in_key[13] ;
	des3_in_key[23] = des3_in_key[15] ;

	ret = crypto_hwf_expand_key(ctx, in_key, key_len);
	if (ret)
	{
		*flags |= CRYPTO_TFM_RES_BAD_KEY_LEN;
		return -EINVAL;
	}

	hwf_aes_set_key(tfm, in_key, key_len) ;
	hwf_des_setkey(tfm, in_key, key_len) ;
	hwf_des3_ede_setkey(tfm , des3_in_key , key_len) ;
		
	hex_print(ctx->key , "hwf" , ctx->key_length*2) ;
	hex_print(ctx->aes_enc , "aes" , ctx->aes_length*2) ;
	hex_print(ctx->des_expkey , "des" , 32) ;

	return 0;
}

static void hwf_encrypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
{

	char alg_choice ;

	alg_choice = get_choice () ;
	printk ( "hwf---current alg_choice is : %c.\n" , alg_choice ) ;

	make_enc_choice (tfm , alg_choice , out , in) ; 
}



static void hwf_decrypt(struct crypto_tfm *tfm, u8 *out, const u8 *in)
{
	char alg_choice ;

	alg_choice = get_choice () ;
	printk ( "hwf---current alg_choice is : %c.\n" , alg_choice ) ;
	
	make_dec_choice (tfm , alg_choice , out , in) ; 		
}

static struct crypto_alg hwf_alg = {
	.cra_name		=	"hwf",
	.cra_driver_name	=	"hwf-generic",
	.cra_priority		=	100,
	.cra_flags		=	CRYPTO_ALG_TYPE_CIPHER,
	.cra_blocksize		=	HWF_BLOCK_SIZE,
	.cra_ctxsize		=	sizeof(struct crypto_hwf_ctx),
	.cra_alignmask		=	3,
	.cra_module		=	THIS_MODULE,
	.cra_u			=	{
		.cipher = {
			.cia_min_keysize	=	HWF_MIN_KEY_SIZE,
			.cia_max_keysize	=	HWF_MAX_KEY_SIZE,
			.cia_setkey		=	crypto_hwf_set_key,
			.cia_encrypt		=	hwf_encrypt,
			.cia_decrypt		=	hwf_decrypt
		}
	}
};

static int __init hwf_init(void)
{
    	printk("netlink_k init\n");  
    	hwf_netlink_init(); 

	return crypto_register_alg(&hwf_alg);
}

static void __exit hwf_fini(void)
{
	if (netlink_skt) 
	{
		netlink_kernel_release(netlink_skt);  
	}  
    	printk("netlink exit\n");  

	crypto_unregister_alg(&hwf_alg);
}

module_init(hwf_init);
module_exit(hwf_fini);

MODULE_DESCRIPTION("hwf Cipher Algorithm");
MODULE_LICENSE("Dual BSD/GPL");
